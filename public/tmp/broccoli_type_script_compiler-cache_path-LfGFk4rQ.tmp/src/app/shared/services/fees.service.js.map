{"version":3,"file":"fees.service.js","sourceRoot":"","sources":["../../../Users/poloagustin/git/angular-seggu/tmp/broccoli_type_script_compiler-input_base_path-L0B8idjO.tmp/0/src/app/shared/services/fees.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAM3C,8BAA6B,iBAAiB,CAAC,CAAA;AAG/C;IACE;;OAEG;IACH,qBAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAC9C,CAAC;IAED,2BAAK,GAAL,UAAM,IAAiB;QACrB,IAAI,GAAG,GAAG,mBAAmB,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QACzF,GAAG,GAAG,GAAG,GAAG,oCAAoC,CAAC;QACjD,GAAG,GAAG,GAAG,GAAG,uBAAuB,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACd,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5F,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACtB,GAAG,GAAG,GAAG,GAAG,2DAA2D,GAAG,QAAQ,CAAC,MAAM,EAAE,GAAG,mCAAmC,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC;QAC/J,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,GAAG,CAAC,GAAG,CAAC;aACR,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC;aACnC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,mCAAa,GAAb,UAAc,QAAgB;QAC5B,IAAI,GAAG,GAAG,mFAAmF,GAAG,QAAQ,GAAG,KAAK,CAAC;QACjH,GAAG,GAAG,GAAG,GAAG,uBAAuB,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,GAAG,CAAC,GAAG,CAAC;aACR,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC;aACnC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,yBAAG,GAAH,UAAI,KAAa;QACf,IAAI,GAAG,GAAG,cAAc,GAAG,KAAK,CAAC;QACjC,GAAG,GAAG,GAAG,GAAG,wBAAwB,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,GAAG,CAAC,GAAG,CAAC;aACR,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;aACpC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,yBAAG,GAAH,UAAI,GAAQ;QACV,IAAI,GAAG,GAAG,cAAc,GAAG,GAAG,CAAC,QAAQ,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;aACb,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAjDH;QAAC,iBAAU,EAAE;;mBAAA;IAkDb,kBAAC;AAAD,CAAC,AAjDD,IAiDC;AAjDY,mBAAW,cAiDvB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { HomeOptions } from '../../home/home-options';\nimport { Fee } from '../domain/fee';\nimport { ParseService } from './parse.service';\n\n@Injectable()\nexport class FeesService {\n  /**\n   *\n   */\n  constructor(private parseService: ParseService) {\n  }\n\n  query(opts: HomeOptions): Observable<Fee[]> {\n    let url = 'classes/Fee?skip=' + (+opts.limit * (opts.page - 1)) + '&limit=' + opts.limit;\n    url = url + '&include=policy.client,policy.risk';\n    url = url + '&order=expirationDate';\n    if (opts.date) {\n      var fromDate = new Date(opts.date.getFullYear(), opts.date.getMonth(), opts.date.getDate());\n      fromDate.setUTCHours(0);\n      var toDate = new Date(fromDate.valueOf());\n      toDate.setDate(toDate.getDate() + 1);\n      toDate.setUTCHours(0);\n      url = url + '&where={\"expirationDate\":{\"$gte\":{\"__type\":\"Date\",\"iso\":\"' + fromDate.toJSON() + '\"},\"$lt\":{\"__type\":\"Date\",\"iso\":\"' + toDate.toJSON() + '\"}}}';\n    }\n    return this.parseService\n      .get(url)\n      .map(this.parseService.extractArray)\n      .catch(this.parseService.handleError);\n  }\n\n  queryByPolicy(policyId: string): Observable<Fee[]> {\n    let url = 'classes/Fee?where={\"policy\":{\"__type\":\"Pointer\",\"className\":\"Policy\",\"objectId\":\"' + policyId + '\"}}';\n    url = url + '&order=expirationDate';\n    return this.parseService\n      .get(url)\n      .map(this.parseService.extractArray)\n      .catch(this.parseService.handleError);\n  }\n\n  get(feeId: string): Observable<Fee> {\n    let url = 'classes/Fee/' + feeId;\n    url = url + '?include=policy.client';\n    return this.parseService\n      .get(url)\n      .map(this.parseService.extractObject)\n      .catch(this.parseService.handleError);\n  }\n\n  put(fee: Fee): Observable<Response> {\n    let url = 'classes/Fee/' + fee.objectId;\n    return this.parseService\n      .put(url, fee)\n      .catch(this.parseService.handleError);\n  }\n}\n"]}