{"version":3,"file":"clients-detail.component.js","sourceRoot":"","sources":["../../Users/poloagustin/git/angular-seggu/tmp/broccoli_type_script_compiler-input_base_path-L0B8idjO.tmp/0/src/app/clients-detail/clients-detail.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA6C,eAAe,CAAC,CAAA;AAC7D,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,uBAAuC,iBAAiB,CAAC,CAAA;AACzD,wBAAwB,4BAA4B,CAAC,CAAA;AACrD,uBAAuB,2BAA2B,CAAC,CAAA;AACnD,wBAAoC,4BAA4B,CAAC,CAAA;AACjE,qBAAiC,yBAAyB,CAAC,CAAA;AAC3D,qBAAiC,yBAAyB,CAAC,CAAA;AAC3D,sBAAsB,0BAA0B,CAAC,CAAA;AACjD,yBAAyB,6BAA6B,CAAC,CAAA;AACvD,sBAA0C,0BAA0B,CAAC,CAAA;AACrE,qBAAqC,yBAAyB,CAAC,CAAA;AAC/D,uBAAkC,iBAAiB,CAAC,CAAA;AACpD,qBAA0C,yBAAyB,CAAC,CAAA;AAEpE,uBAAuB,yBAAyB,CAAC,CAAA;AACjD,gCAA+B,oCAAoC,CAAC,CAAA;AAsBpE;IAKE,gCACU,KAAqB,EACrB,MAAc,EACd,cAA8B;QAF9B,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;IAAI,CAAC;IAE7C,yCAAQ,GAAR;QAAA,iBAcC;QAbC,IAAI,CAAC,MAAM,GAAG,IAAI,eAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,MAAM;YAC3C,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YACtB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;iBACxB,SAAS,CACV,UAAA,MAAM;gBACJ,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAC3B,CAAC,EAAE,UAAA,KAAK;gBACN,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACpB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAC3B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4CAAW,GAAX;QACE,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACzB,CAAC;IAEO,wCAAO,GAAf,UAAgB,KAAK;QACnB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IApDH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,oBAAoB;YAC9B,WAAW,EAAE,+BAA+B;YAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;YAC3C,UAAU,EAAE;gBACV,+BAAqB;gBACrB,yBAAkB;gBAClB,yBAAkB;gBAClB,mBAAS;gBACT,iBAAQ;gBACR,eAAO;gBACP,qBAAU;gBACV,oBAAY;gBACZ,qBAAa;gBACb,aAAM;gBACN,0BAAiB;aAClB;YACD,SAAS,EAAE,CAAC,qBAAc,EAAE,kCAA2B,EAAE,gCAAc,CAAC;SACzE,CAAC;;8BAAA;IAkCF,6BAAC;AAAD,CAAC,AAjCD,IAiCC;AAjCY,8BAAsB,yBAiClC,CAAA","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport {MdToolbar} from '@angular2-material/toolbar';\nimport {MdButton} from '@angular2-material/button';\nimport {MD_SIDENAV_DIRECTIVES} from '@angular2-material/sidenav';\nimport {MD_LIST_DIRECTIVES} from '@angular2-material/list';\nimport {MD_CARD_DIRECTIVES} from '@angular2-material/card';\nimport {MdInput} from '@angular2-material/input';\nimport {MdCheckbox} from '@angular2-material/checkbox';\nimport {MdRadioButton, MdRadioGroup} from '@angular2-material/radio';\nimport {MdIcon, MdIconRegistry} from '@angular2-material/icon';\nimport { ROUTER_DIRECTIVES } from '@angular/router';\nimport {MdUniqueSelectionDispatcher} from '@angular2-material/core';\n\nimport { Client } from '../shared/domain/client';\nimport { ClientsService } from '../shared/services/clients.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-clients-detail',\n  templateUrl: 'clients-detail.component.html',\n  styleUrls: ['clients-detail.component.css'],\n  directives: [\n    MD_SIDENAV_DIRECTIVES,\n    MD_LIST_DIRECTIVES,\n    MD_CARD_DIRECTIVES,\n    MdToolbar,\n    MdButton,\n    MdInput,\n    MdCheckbox,\n    MdRadioGroup,\n    MdRadioButton,\n    MdIcon,\n    ROUTER_DIRECTIVES\n  ],\n  providers: [MdIconRegistry, MdUniqueSelectionDispatcher, ClientsService]\n})\nexport class ClientsDetailComponent implements OnInit, OnDestroy {\n  client: Client;\n  private sub: any;\n  hideProgress: boolean;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private clientsService: ClientsService) { }\n\n  ngOnInit() {\n    this.client = new Client();\n    this.sub = this.route.params.subscribe(params => {\n      let id = params['id'];\n      this.clientsService.get(id)\n        .subscribe(\n        client => {\n          this.client = client;\n          this.hideProgress = true;\n        }, error => {\n          this.onError(error);\n          this.hideProgress = true;\n        });\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  private onError(error) {\n    return Observable.throw(error.message);\n  }\n}\n"]}