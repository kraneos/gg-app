{"version":3,"file":"login.component.js","sourceRoot":"","sources":["../../Users/poloagustin/git/angular-seggu/tmp/broccoli_type_script_compiler-input_base_path-TO0yoQC9.tmp/0/src/app/login/login.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport {MdToolbar} from '@angular2-material/toolbar';\nimport {MdButton} from '@angular2-material/button';\nimport {MD_SIDENAV_DIRECTIVES} from '@angular2-material/sidenav';\nimport {MD_LIST_DIRECTIVES} from '@angular2-material/list';\nimport {MD_CARD_DIRECTIVES} from '@angular2-material/card';\nimport {MdInput} from '@angular2-material/input';\nimport {MdCheckbox} from '@angular2-material/checkbox';\nimport {MdRadioButton, MdRadioGroup} from '@angular2-material/radio';\nimport {MdIcon, MdIconRegistry} from '@angular2-material/icon';\nimport {MdUniqueSelectionDispatcher} from '@angular2-material/core';\n\nimport { LoginService } from '../shared/services/login.service';\nimport { CurrentUserService } from '../shared/services/current-user.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-login',\n  templateUrl: 'login.component.html',\n  styleUrls: ['login.component.css'],\n  directives: [\n    MD_SIDENAV_DIRECTIVES,\n    MD_LIST_DIRECTIVES,\n    MD_CARD_DIRECTIVES,\n    MdToolbar,\n    MdButton,\n    MdInput,\n    MdCheckbox,\n    MdRadioGroup,\n    MdRadioButton,\n    MdIcon\n  ],\n  providers: [\n    LoginService,\n    CurrentUserService\n  ],\n})\nexport class LoginComponent implements OnInit {\n  username: string;\n  password: string;\n  error: string;\n  showError: boolean;\n\n  constructor(\n    private router: Router,\n    private loginService: LoginService,\n    private currentUserService: CurrentUserService) { }\n\n  ngOnInit() {\n    this.showError = false;\n  }\n\n  login() {\n    this.loginService.login(this.username, this.password)\n      .subscribe(\n      user => {\n        this.currentUserService.set(user);\n        this.loginService\n          .getSegguClient(user.segguClient.objectId)\n          .subscribe(\n          segguClient => {\n            this.loginService\n              .getRolesBySegguClient(segguClient)\n              .subscribe(\n              roles => {\n                let postACL = {};\n                postACL[user.objectId] = { read: true, write: true };\n                roles.forEach(function (r) {\n                  postACL['role:' + r.name] = { read: true, write: true };\n                });\n                this.currentUserService.setPostACL(postACL);\n                this.router.navigate(['/']);\n              },\n              onError\n              );\n          },\n          onError\n          );\n      },\n      onError\n      );\n\n    function onError(error) {\n      this.error = error.message;\n      this.showError = true;\n      return Observable.throw(error.message);\n    }\n  }\n}\n"]}