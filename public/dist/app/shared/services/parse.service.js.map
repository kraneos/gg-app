{"version":3,"file":"parse.service.js","sourceRoot":"","sources":["../../../Users/poloagustin/git/angular-seggu/tmp/broccoli_type_script_compiler-input_base_path-ZrUhIxD8.tmp/0/src/app/shared/services/parse.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Request, RequestOptionsArgs, Response, ConnectionBackend, RequestOptions, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { CurrentUser } from '../domain/current-user';\nimport { CurrentUserService } from '../services/current-user.service';\n\n@Injectable()\nexport abstract class ParseService {\n    /**\n     *\n     */\n    constructor(private http: Http, private currentUserService: CurrentUserService) {\n    }\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.http.get(this.getUrl(url), this.getOptions(options));\n    }\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.http.post(this.getUrl(url), this.applyACL(body), this.getOptions(options));\n    }\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.http.put(this.getUrl(url), body, this.getOptions(options));\n    }\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.http.delete(this.getUrl(url), this.getOptions(options));\n    }\n    extractArray(res: Response) {\n        let body = res.json();\n        return body.results || [];\n    }\n    extractObject(res: Response) {\n        let body = res.json();\n        return body || {};\n    }\n    handleError(error: any) {\n        let errMsg = (error.message) ? error.message :\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n    private getUrl(url: string): string {\n        return 'https://seggu-api-develop.herokuapp.com/parse/' + url;\n    }\n    private getOptions(options?: RequestOptionsArgs) {\n        var opts = options || new RequestOptions({ headers: new Headers() });\n        opts.headers.append('X-Parse-Application-Id', 'seggu-api');\n        let userStr = localStorage.getItem('segguUser');\n        let user = JSON.parse(userStr);\n        if (user) {\n            opts.headers.append('X-Parse-Session-Token', user.sessionToken);\n        }\n        return opts;\n    }\n    private applyACL(body: any) {\n      var postACL = this.currentUserService.getPostACL();\n\n      if (postACL && body) {\n        body.ACL = postACL;\n      }\n\n      return body;\n    }\n}\n"]}