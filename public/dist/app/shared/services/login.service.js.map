{"version":3,"file":"login.service.js","sourceRoot":"","sources":["../../../Users/poloagustin/git/angular-seggu/tmp/broccoli_type_script_compiler-input_base_path-ZrUhIxD8.tmp/0/src/app/shared/services/login.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAI3C,8BAA6B,iBAAiB,CAAC,CAAA;AAO/C;IACE;;OAEG;IACH,sBAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAE9C,CAAC;IAED,4BAAK,GAAL,UAAM,QAAQ,EAAE,QAAQ;QACtB,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,GAAG,CAAC,iBAAiB,GAAG,QAAQ,GAAG,YAAY,GAAG,QAAQ,CAAC;aAC3D,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;aAC1B,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,6BAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;aACpB,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,8BAAO,GAAP;QACE,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,GAAG,CAAC,8BAA8B,CAAC;aACnC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;aACpC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,qCAAc,GAAd,UAAe,KAAa;QAC1B,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,GAAG,CAAC,sBAAsB,GAAG,KAAK,CAAC;aACnC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;aACpC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,4CAAqB,GAArB,UAAsB,WAAwB;QAC5C,IAAI,GAAG,GAAG,OAAO,CAAC;QAClB,GAAG,GAAG,GAAG,GAAG,4BAA4B,GAAG,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC;QACpE,MAAM,CAAC,IAAI,CAAC,YAAY;aACrB,GAAG,CAAC,GAAG,CAAC;aACR,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC;aACnC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAEO,uCAAgB,GAAxB,UAAyB,GAAa;QACpC,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAhDH;QAAC,iBAAU,EAAE;;oBAAA;IAiDb,mBAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,oBAAY,eAgDxB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { ParseService } from './parse.service';\nimport { CurrentUser } from '../domain/current-user';\nimport { Role } from '../domain/role';\nimport { User } from '../domain/user';\nimport { SegguClient } from '../domain/seggu-client';\n\n@Injectable()\nexport class LoginService {\n  /**\n   *\n   */\n  constructor(private parseService: ParseService) {\n\n  }\n\n  login(username, password): Observable<CurrentUser> {\n    return this.parseService\n      .get('login?username=' + username + '&password=' + password)\n      .map(this.extractLoginData)\n      .catch(this.parseService.handleError);\n  }\n\n  logout(): Observable<Response> {\n    return this.parseService\n      .post('logout', null)\n      .catch(this.parseService.handleError);\n  }\n\n  getUser(): Observable<User> {\n    return this.parseService\n      .get('users/me?include=segguClient')\n      .map(this.parseService.extractObject)\n      .catch(this.parseService.handleError);\n  }\n\n  getSegguClient(objId: string): Observable<SegguClient> {\n    return this.parseService\n      .get('classes/SegguClient/' + objId)\n      .map(this.parseService.extractObject)\n      .catch(this.parseService.handleError);\n  }\n\n  getRolesBySegguClient(segguClient: SegguClient): Observable<Role[]> {\n    var url = 'roles';\n    url = url + '?where={\"name\":{\"$regex\":\"' + segguClient.name + '\"}}';\n    return this.parseService\n      .get(url)\n      .map(this.parseService.extractArray)\n      .catch(this.parseService.handleError);\n  }\n\n  private extractLoginData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n}\n"]}